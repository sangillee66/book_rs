{
  "hash": "176d9188bf4ee34b481ca30fc4e61970",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"데이터의 표준과 구득\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 데이터 표준\n\n### 저장 포맷\n\n### 압축 포맷\n\n### 공통 포맷\n\n### 수준\n\n### 메타 데이터\n\n## 데이터 공급\n\n### 웹사이트\n\n-   EarthExplore\n\n    -   [USGS](https://www.usgs.gov/)\n\n    -   <https://earthexplorer.usgs.gov/>\n\n    -   Landsat, AVHRR, SRTM, NLCD, GLCC, RADAR\n\n-   EarthData\n\n    -   [NASA](https://www.nasa.gov/)\n\n    -   <https://www.earthdata.nasa.gov/>\n\n-   The Copernicus Data Space Ecosystem\n\n    -   [ESA](https://dataspace.copernicus.eu/)\n\n    -   <https://browser.dataspace.copernicus.eu/>\n\n-   3DEP LidarExplorer\n\n    -   [USGS](https://www.usgs.gov/)\n\n    -   <https://apps.nationalmap.gov/lidar-explorer/>\n\n### 구글 어스 엔진(Google Earth Engine)\n\n-   <https://earthengine.google.com/>\n\n## 데이터 구득\n\n### 구글 어스 엔진\n\n-   QGIS Plug in for Earth Engine\n\n    -   <https://gee-community.github.io/qgis-earthengine-plugin/>\n\n-   `rgee`: Google Earth Engine for R\n\n    -   <https://r-spatial.github.io/rgee/#quick-start-users-guide-for-rgee>\n\n![](images/clipboard-393918566.png)\n\n### R 패키지\n\n-   `rsat`\n\n    -   <https://docs.ropensci.org/rsat/>\n\n-   `getSpatialData`\n\n    -   <https://github.com/16EAGLE/getSpatialData>\n\n    -   Landsat, Sentinel, MODIS, SRTM\n\n-   `CDSE`: Copernicus Data Space Ecosystem API Wrapper\n\n    -   <https://zivankaraman.github.io/CDSE/>\n\n    -   Sentinel\n\n-   `openeo`: Client Interface for openEO Servers\n\n    -   <https://github.com/Open-EO/openeo-r-client>\n\n-   `rsi`: Spectral Indices\n\n    -   <https://permian-global-research.github.io/rsi/>\n\n-   `rstac`: R client library for STAC\n\n    -   SpatioTemporal Asset Catalog (STAC)\n\n    -   <https://brazil-data-cube.github.io/rstac/reference/rstac.html>\n\n-   `luna`: Toos for Satellite Remote Sensing (Earth Observation) Data Processing\n\n    -   <https://rspatial.r-universe.dev/luna/doc/manual.html>\n\n## Landsat Data 다운로드\n\n### STAC API를 이용한 데이터 취득 1: `rstac` 패키지의 활용\n\n원하는 지역을 설정한다. 셰이프 파일을 이용하는 방법을 정리한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\")\n\nseoul_bbox <- seoul |> \n  st_transform(4326) |> st_bbox()\n```\n:::\n\n\n\\\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(stars)\nlibrary(rstac)\nlibrary(terra)\nlibrary(tmap)\n\n# STAC API를 지정. Landsat 데이터에 대해 두 가지가 존재하는데 후자를 사용함.\n\nstac_obj <- stac(\"https://landsatlook.usgs.gov/stac-server\") # 저해상도 혹은 파일이 열리지 않음.\nstac_obj <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") # 고해상도, 그런데 Level-1은 없음\n\n# 컬렉션 내용 및 ID 확인\ncollections <- stac_obj |> \n  collections() |> \n  get_request()\n\nmap_chr(collections$collections, \"id\") # \"landsat-c2-l1\"를 확인\n\n# 특정한 지역과 시간에 대한 검색: 6개가 확인됨\nselected_item <- stac_obj |> \n  stac_search(\n    collections = \"landsat-c2-l2\",  \n    bbox = seoul_bbox,\n    datetime = \"2024-08-15/2024-09-15\",\n    limit = 20\n  ) |> \n  get_request()\n\n# 네 번째 것을 다운로드 하기로 결정함: 구름 조건 등을 검토할 수도 있음.\n\nitems <- stac_obj |> \n  stac_search(\n    collections = \"landsat-c2-l2\",  \n    bbox = seoul_bbox,\n    datetime = \"2024-08-15/2024-09-15\",\n    limit = 20\n  ) |> \n  get_request()\n\nselected_item <- items$features[[4]]\n\n# Assests 확인: 단순\nselected_item\n\n# Assests 확인: 복잡\nmap_dfr(items_assets(selected_item), function(key) {\n  tibble(asset = key, description = selected_item$assets[[key]]$title)\n}) |> print(n = 25)\n\n# Authentication process\nselected_item <- selected_item |> \n   items_sign_planetary_computer()\n\n# 미리 보기\n\nselected_item$assets[[\"rendered_preview\"]]$href\nselected_item %>% \n  assets_url(asset_names = \"rendered_preview\") %>%\n  preview_plot()\n\n# 다운로드\n\nassets_download(selected_item, c(\"red\"), \n                output_dir = \"D:/My R/World Data Manupulation/stac/\")\n\nB4 <- file.path(\n  \"D:/My R/World Data Manupulation/stac/\",\n  \"landsat-c2\",\n  \"level-2\",\n  \"standard\",\n  \"oli-tirs\",\n  \"2024\",\n  \"116\", \n  \"034\",\n  \"LC08_L2SP_116034_20240829_20240905_02_T1\",\n  \"LC08_L2SP_116034_20240829_20240905_02_T1_SR_B4.tif\"\n) |> rast()\n\nlandsat_image <- c(B2, B3, B4)\nnames(landsat_image) <- c(\"B2\", \"B3\", \"B4\")\n\nseoul_crs <- \"+proj=tmerc +lat_0=38 +lon_0=127.5 +k=0.9996 +x_0=1000000 +y_0=2000000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"\n\nlandsat_image_seoul <- landsat_image |> \n  project(seoul_crs) |> crop(seoul)\n\nlandsat_image_seoul_mask <- landsat_image_seoul |> \n  mask(seoul)\n\nplotRGB(landsat_image_seoul_mask, r = \"B4\", g = \"B3\", b = \"B2\", stretch = \"lin\")\n\nlandsat_image_seoul_mask_str <- \n  stretch(landsat_image_seoul_mask, minv = 0, maxv = 255, minq = 0.1, maxq = 0.95)\n\ntm_shape(landsat_image_seoul_mask_str, raster.downsample = FALSE) + \n  tm_rgb(r = 3, g = 2, b = 1) + \n  tm_shape(seoul) + tm_borders(lwd = 2, col = \"gray20\")\n```\n:::\n\n\nLandsat의 Level-1 데이터를 USGS의 STAC API를 통해 다운로드한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstac_obj <- stac(\"https://landsatlook.usgs.gov/stac-server\")\n\ncollections <- stac_obj |> \n  collections() |> \n  get_request()\n\nmap_chr(collections$collections, \"id\")\n\n# landsat-c2l1: Level-1 data\n\nitems <- stac_obj |> \n  stac_search(\n    collections = \"landsat-c2l1\",  \n    bbox = seoul_bbox,\n    datetime = \"2024-08-29T00:00:00Z/2024-08-29T23:59:59Z\",\n    limit = 5\n  ) |> \n  get_request() |> \n  items_sign_planetary_computer()\n\nselected_item <- items$features[[1]]\n\nselected_item$assets$blue |> preview_plot()\n\nselected_item$assets[[\"rendered_preview\"]]$href\nselected_item %>% \n  assets_url(asset_names = \"thumbnail\") %>%\n  preview_plot()\n\nassets_download(selected_item, c(\"red\"), output_dir = \"D:/R_Classes/2025_1_RS/\", overwrite = TRUE)\n\n# 다운로드는 되지만 파일의 크기가 작음.\n```\n:::\n\n\n### STAC API를 이용한 데이터 취득 1: [`rsi`](https://permian-global-research.github.io/rsi/) 패키지의 활용\n\n빠르고 crop이 이루어진다는 점에서 편리하지만 해상도가 떨어짐.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rsi)\n\nseoul <- st_read(\"D:/My R/Korean Administrative Areas/행정구역 셰이프 파일/2 Original Cleaning/2023_2Q/SEOUL_SIDO_2023_2Q.shp\")\naoi <- seoul \n\nlandsat_image_2024 <- get_landsat_imagery(\n  aoi,\n  start_date = \"2024-08-15\",\n  end_date = \"2024-09-15\",\n  output_filename = tempfile(fileext = \".tif\")\n)\n\nseoul_2024 <- rast(landsat_image_2024)\n\nplotRGB(seoul_2024, r = \"R\", g = \"G\", b = \"B\", stretch = \"lin\")\n```\n:::\n",
    "supporting": [
      "2_4_data_acquisition_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}