{
  "hash": "9e25c9027a4a715befa8c4f3e45f00cc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"영상 분류\"\nauthor: Sang-Il Lee\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nlightbox: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## 개요\n\n필수적인 패키지를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(terra)\nlibrary(tmap)\nlibrary(RStoolbox)\n# library(randomForest)\n# library(kernlab)\n# library(RSNNS)\n# library(C50)\n```\n:::\n\n\n예제 데이터를 불러온다.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain <- readRDS(system.file(\"external/trainingPolygons_lsat.rds\", package=\"RStoolbox\"))\nlsat_str <- lsat |> \n  stretch(minv = 0, maxv = 255, minq = 0.05, maxq = 0.95)\n\nmy_map <- tm_shape(lsat_str) + tm_rgb(r = 3, g =2, b =1) +\n  tm_layout(legend.outside = TRUE)\nmy_map\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-3-1.png){width=7200}\n:::\n:::\n\n\n## 감독 분류\n\n훈련 데이터를 불러온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_map <- tm_shape(lsat_str) + \n  tm_rgb(r = 3, g =2, b =1) +\n  tm_shape(train) + \n  tm_polygons(col = \"class\", \n              palette = c(\"yellow\", \"sandybrown\", \"darkgreen\", \"blue\")) +\n  tm_layout(legend.outside = TRUE)\nmy_map\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-4-1.png){width=7200}\n:::\n:::\n\n\n최대 우도(maximum likelihood) 분류 알고리즘을 적용하여 감독 분류를 실행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_mlc <- superClass(\n  lsat, \n  trainData = train, \n  responseCol = \"class\",\n  model = \"mlc\", \n  tuneLength = 1, trainPartition = 0.7\n  )\n\nsc_mlc$modelFit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n  TrainAccuracy TrainKappa method\n1     0.9977143   0.996428 custom\n\n[[2]]\nCross-Validated (5 fold) Confusion Matrix \n\n(entries are average cell counts across resamples)\n \n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared      147.8        0.0    0.4   0.0\n  fallen_dry     0.0       23.0    0.2   0.2\n  forest         0.4        0.0  260.6   0.0\n  water          0.0        0.0    0.0  92.0\n                            \n Accuracy (average) : 0.9977\n```\n\n\n:::\n\n```{.r .cell-code}\nsc_mlc$validation$performance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared        192          0      1     0\n  fallen_dry       0          9      0     0\n  forest           1          0    526     0\n  water            0          0      0   139\n\nOverall Statistics\n                                          \n               Accuracy : 0.9977          \n                 95% CI : (0.9917, 0.9997)\n    No Information Rate : 0.6071          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.9959          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: cleared Class: fallen_dry Class: forest\nSensitivity                  0.9948           1.00000        0.9981\nSpecificity                  0.9985           1.00000        0.9971\nPos Pred Value               0.9948           1.00000        0.9981\nNeg Pred Value               0.9985           1.00000        0.9971\nPrevalence                   0.2224           0.01037        0.6071\nDetection Rate               0.2212           0.01037        0.6060\nDetection Prevalence         0.2224           0.01037        0.6071\nBalanced Accuracy            0.9967           1.00000        0.9976\n                     Class: water\nSensitivity                1.0000\nSpecificity                1.0000\nPos Pred Value             1.0000\nNeg Pred Value             1.0000\nPrevalence                 0.1601\nDetection Rate             0.1601\nDetection Prevalence       0.1601\nBalanced Accuracy          1.0000\n```\n\n\n:::\n:::\n\n\n결과를 지도를 제작한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- as.factor(sc_mlc$map)\nlevels(r) <- data.frame(ID = 1:4, class_supervised = levels(train$class))\n\ntm_shape(r) + tm_raster(\n  palette = c(\"yellow\", \"sandybrown\", \"darkgreen\", \"blue\"), \n  title = \"Supervised: \\n Maximum Likelihood\") +\n  tm_layout(legend.outside = TRUE) \n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-6-1.png){width=7200}\n:::\n:::\n\n\n## 무감독 분류\n\n*k*-평균 분류법을 적용한다. 우선 클래스의 개수를 3개로 한 무감독 분류를 실행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuc <- unsuperClass(lsat, nClasses = 3)\nuc_r <- as.factor(uc$map)\ntm_shape(uc_r) + \n  tm_raster(palette = \"Set1\", title = \"Classes\") +\n  tm_layout(legend.outside = TRUE, \n            title = \"K-Means Clustering: \\n3 Classes\")\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-7-1.png){width=7200}\n:::\n:::\n\n\n클래스 개수를 4개로 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuc <- unsuperClass(lsat, nClasses = 4)\nuc_r <- as.factor(uc$map)\ntm_shape(uc_r) + tm_raster(palette = \"Set1\", title = \"Classes\") +\n  tm_layout(legend.outside = TRUE, title = \"K-Means Clustering: \\n4 Classes\")\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-8-1.png){width=7200}\n:::\n:::\n\n\n클래스 개수를 5개로 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuc <- unsuperClass(lsat, nClasses = 5)\nuc_r <- as.factor(uc$map)\ntm_shape(uc_r) + tm_raster(palette = \"Set1\", title = \"Classes\") +\n  tm_layout(\n    legend.outside = TRUE, \n    title = \"K-Means Clustering: \\n5 Classes\")\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-9-1.png){width=7200}\n:::\n:::\n\n\n## 혼합 분류\n\n## 분광혼합분석\n\n[`RStoolbox`](https://bleutner.github.io/RStoolbox/) 패키지의 `mesma()` 함수를 활용하면 spectral unmixing이 가능하다.\n\n## 객체-기반 분류\n\n## 인공지능-기반 분류\n\n인공지능-기반 분류법은 모두 감독 분류이기 때문에 위의 최대 우도법과 마찬가지로 훈련 데이터가 필요하다.\n\n### 결정 트리(decision tree)\n\n결정 트리 알고리즘을 적용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_dt <- superClass(\n  lsat, \n  trainData = train, \n  responseCol = \"class\",\n  model = \"C5.0\", \n  tuneLength = 1, \n  trainPartition = 0.7)\n\nsc_dt$modelFit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n  TrainAccuracy TrainKappa method\n1     0.9977373  0.9963813   C5.0\n\n[[2]]\nCross-Validated (5 fold) Confusion Matrix \n\n(entries are average cell counts across resamples)\n \n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared      151.6        0.0    0.2   0.0\n  fallen_dry     0.0       14.6    0.2   0.2\n  forest         0.6        0.0  271.0   0.0\n  water          0.0        0.0    0.0  92.0\n                            \n Accuracy (average) : 0.9977\n```\n\n\n:::\n\n```{.r .cell-code}\nsc_dt$validation$performance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared        151          0      0     0\n  fallen_dry      18         51      2     0\n  forest           4          0    462     0\n  water            0          0      0   139\n\nOverall Statistics\n                                          \n               Accuracy : 0.971           \n                 95% CI : (0.9571, 0.9813)\n    No Information Rate : 0.5611          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.9526          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: cleared Class: fallen_dry Class: forest\nSensitivity                  0.8728           1.00000        0.9957\nSpecificity                  1.0000           0.97423        0.9890\nPos Pred Value               1.0000           0.71831        0.9914\nNeg Pred Value               0.9675           1.00000        0.9945\nPrevalence                   0.2092           0.06167        0.5611\nDetection Rate               0.1826           0.06167        0.5586\nDetection Prevalence         0.1826           0.08585        0.5635\nBalanced Accuracy            0.9364           0.98711        0.9923\n                     Class: water\nSensitivity                1.0000\nSpecificity                1.0000\nPos Pred Value             1.0000\nNeg Pred Value             1.0000\nPrevalence                 0.1681\nDetection Rate             0.1681\nDetection Prevalence       0.1681\nBalanced Accuracy          1.0000\n```\n\n\n:::\n:::\n\n\n분류 결과를 지도로 나타낸다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- as.factor(sc_dt$map)\nlevels(r) <- data.frame(ID = 1:4, class_supervised = levels(train$class))\n\ntm_shape(r) + tm_raster(\n  palette = c(\"yellow\", \"sandybrown\", \"darkgreen\", \"blue\"),\n  title = \"Classes\") +\n  tm_layout(\n    legend.outside = TRUE, \n    title = \"AI-based Classification: \\nDecision Tree\")\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-11-1.png){width=7200}\n:::\n:::\n\n\n### 랜덤 포레스트(random forest)\n\n랜덤 포레스트 알고리즘을 적용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_rf <- superClass(\n  lsat, \n  trainData = train, \n  responseCol = \"class\",\n  model = \"rf\", \n  tuneLength = 1, \n  trainPartition = 0.7)\n\nsc_rf$modelFit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n  TrainAccuracy TrainKappa method\n1     0.9991744  0.9986552     rf\n\n[[2]]\nCross-Validated (5 fold) Confusion Matrix \n\n(entries are average cell counts across resamples)\n \n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared      106.0        0.0    0.0   0.0\n  fallen_dry     0.0       21.2    0.0   0.0\n  forest         0.4        0.0  265.0   0.0\n  water          0.0        0.0    0.0  92.2\n                            \n Accuracy (average) : 0.9992\n```\n\n\n:::\n\n```{.r .cell-code}\nsc_rf$validation$performance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared        402          0      0     0\n  fallen_dry       0         18      0     0\n  forest           0          0    305     0\n  water            0          0      0   139\n\nOverall Statistics\n                                     \n               Accuracy : 1          \n                 95% CI : (0.9957, 1)\n    No Information Rate : 0.4653     \n    P-Value [Acc > NIR] : < 2.2e-16  \n                                     \n                  Kappa : 1          \n                                     \n Mcnemar's Test P-Value : NA         \n\nStatistics by Class:\n\n                     Class: cleared Class: fallen_dry Class: forest\nSensitivity                  1.0000           1.00000         1.000\nSpecificity                  1.0000           1.00000         1.000\nPos Pred Value               1.0000           1.00000         1.000\nNeg Pred Value               1.0000           1.00000         1.000\nPrevalence                   0.4653           0.02083         0.353\nDetection Rate               0.4653           0.02083         0.353\nDetection Prevalence         0.4653           0.02083         0.353\nBalanced Accuracy            1.0000           1.00000         1.000\n                     Class: water\nSensitivity                1.0000\nSpecificity                1.0000\nPos Pred Value             1.0000\nNeg Pred Value             1.0000\nPrevalence                 0.1609\nDetection Rate             0.1609\nDetection Prevalence       0.1609\nBalanced Accuracy          1.0000\n```\n\n\n:::\n:::\n\n\n분류 결과를 지도로 나타낸다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- as.factor(sc_rf$map)\nlevels(r) <- data.frame(ID = 1:4, class_supervised = levels(train$class))\n\ntm_shape(r) + tm_raster(\n  palette = c(\"yellow\", \"sandybrown\", \"darkgreen\", \"blue\"),\n  title = \"Classes\") +\n  tm_layout(\n    legend.outside = TRUE, \n    title = \"AI-based Classification: \\n Random Forest\")\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-13-1.png){width=7200}\n:::\n:::\n\n\n### 스포트 벡터 머신(support vector machine)\n\n스포트 벡터 머신 알고리즘을 적용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_svm <- superClass(\n  lsat, \n  trainData = train, \n  responseCol = \"class\",\n  model = \"svmRadial\", \n  tuneLength = 1, \n  trainPartition = 0.7)\n\nsc_svm$modelFit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n  TrainAccuracy TrainKappa    method\n1     0.9992285  0.9987971 svmRadial\n\n[[2]]\nCross-Validated (5 fold) Confusion Matrix \n\n(entries are average cell counts across resamples)\n \n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared      158.0        0.0    0.2   0.0\n  fallen_dry     0.0       18.2    0.0   0.0\n  forest         0.2        0.0  250.0   0.0\n  water          0.0        0.0    0.0  91.6\n                            \n Accuracy (average) : 0.9992\n```\n\n\n:::\n\n```{.r .cell-code}\nsc_svm$validation$performance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared        141          1      0     0\n  fallen_dry       0         32      0     0\n  forest           2          0    645     0\n  water            0          0      0   142\n\nOverall Statistics\n                                          \n               Accuracy : 0.9969          \n                 95% CI : (0.9909, 0.9994)\n    No Information Rate : 0.6698          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.9938          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: cleared Class: fallen_dry Class: forest\nSensitivity                  0.9860           0.96970        1.0000\nSpecificity                  0.9988           1.00000        0.9937\nPos Pred Value               0.9930           1.00000        0.9969\nNeg Pred Value               0.9976           0.99893        1.0000\nPrevalence                   0.1485           0.03427        0.6698\nDetection Rate               0.1464           0.03323        0.6698\nDetection Prevalence         0.1475           0.03323        0.6719\nBalanced Accuracy            0.9924           0.98485        0.9969\n                     Class: water\nSensitivity                1.0000\nSpecificity                1.0000\nPos Pred Value             1.0000\nNeg Pred Value             1.0000\nPrevalence                 0.1475\nDetection Rate             0.1475\nDetection Prevalence       0.1475\nBalanced Accuracy          1.0000\n```\n\n\n:::\n:::\n\n\n결과를 지도로 나타낸다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- as.factor(sc_svm$map)\nlevels(r) <- data.frame(ID = 1:4, class_supervised = levels(train$class))\n\ntm_shape(r) + tm_raster(\n  palette = c(\"yellow\", \"sandybrown\", \"darkgreen\", \"blue\"),\n  title = \"Classes\") +\n  tm_layout(\n    legend.outside = TRUE, \n    title = \"AI-based Classification: \\n Support Vector Machine\")\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-15-1.png){width=7200}\n:::\n:::\n\n\n### 인공신경망(artificial neural network, ANN)\n\n인공신경망 알고리즘을 적용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsc_ann <- superClass(\n  lsat, \n  trainData = train, \n  responseCol = \"class\",\n  model = \"nnet\", \n  tuneLength = 3, \n  trainPartition = 0.7,\n  verbose = FALSE,\n  trace = FALSE)\n\nsc_ann$modelFit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n  TrainAccuracy TrainKappa method\n1     0.9954531   0.992775   nnet\n\n[[2]]\nCross-Validated (5 fold) Confusion Matrix \n\n(entries are average cell counts across resamples)\n \n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared      144.6        0.0    0.4   0.0\n  fallen_dry     0.0       21.4    0.2   0.0\n  forest         1.0        0.0  270.8   0.0\n  water          0.0        0.8    0.0  88.8\n                            \n Accuracy (average) : 0.9955\n```\n\n\n:::\n\n```{.r .cell-code}\nsc_ann$validation$performance\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nConfusion Matrix and Statistics\n\n            Reference\nPrediction   cleared fallen_dry forest water\n  cleared        206          0      1     0\n  fallen_dry       0         13      1     0\n  forest           0          0    251     0\n  water            0          0      0   156\n\nOverall Statistics\n                                          \n               Accuracy : 0.9968          \n                 95% CI : (0.9885, 0.9996)\n    No Information Rate : 0.4029          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.9952          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: cleared Class: fallen_dry Class: forest\nSensitivity                  1.0000           1.00000        0.9921\nSpecificity                  0.9976           0.99837        1.0000\nPos Pred Value               0.9952           0.92857        1.0000\nNeg Pred Value               1.0000           1.00000        0.9947\nPrevalence                   0.3280           0.02070        0.4029\nDetection Rate               0.3280           0.02070        0.3997\nDetection Prevalence         0.3296           0.02229        0.3997\nBalanced Accuracy            0.9988           0.99919        0.9960\n                     Class: water\nSensitivity                1.0000\nSpecificity                1.0000\nPos Pred Value             1.0000\nNeg Pred Value             1.0000\nPrevalence                 0.2484\nDetection Rate             0.2484\nDetection Prevalence       0.2484\nBalanced Accuracy          1.0000\n```\n\n\n:::\n:::\n\n\n결과를 지도로 나타낸다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nr <- as.factor(sc_ann$map)\nlevels(r) <- data.frame(ID = 1:4, class_supervised = levels(train$class))\n\ntm_shape(r) + tm_raster(\n  palette = c(\"yellow\", \"sandybrown\", \"darkgreen\", \"blue\"),\n  title = \"Classes\") +\n  tm_layout(\n    legend.outside = TRUE, \n    title = \"AI-based Classification: \\n ANN\")\n```\n\n::: {.cell-output-display}\n![](4_3_image_classification_files/figure-html/unnamed-chunk-17-1.png){width=7200}\n:::\n:::\n\n\n### 합성곱신경망(convolution neural network, CNN)\n",
    "supporting": [
      "4_3_image_classification_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}